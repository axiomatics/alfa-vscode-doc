{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/policy-authoring/rles-policies-and-policy-sets/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Rules, Policies, and Policy sets","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Rules, Policies, and Policy sets\",\n  \"section\": \"Policy Authoring\",\n  \"order\": 6\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"rules-policies-and-policy-sets\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#rules-policies-and-policy-sets\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Rules, Policies, and Policy sets\"), mdx(\"p\", null, \"The actual expressions for granting and denying access are defined in a hierarchical structure consisting of rules, policies and policy sets.\"), mdx(\"h2\", {\n    \"id\": \"rules\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#rules\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Rules\"), mdx(\"p\", null, \"The most fundamental element for defining the access control policies is the rule. Here is an example of a rule:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0permit\\n\\xA0\\xA0\\xA0\\xA0\\xA0target\\xA0clause Attributes.resourceType == \\\"document\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0condition Attributes.userClearance >= Attributes.resourceClassification\\n}\\n\")), mdx(\"p\", null, \"A rule is declared with the keyword \\\"rule\\\". Every rule must contain the effect of the rule, which is either \\\"permit\\\" or \\\"deny\\\". The rule may contain a target and/or a condition, and this determines whether the rule applies to the request. If the rule has no condition or target, then the rule applies to every request.\"), mdx(\"p\", null, \"The rule declaration above does not define a name for the rule, in which case the compiler will automatically generate a unique ID for the rule.\"), mdx(\"p\", null, \"The rule can be given an explicit name after the rule keyword in the declaration:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"rule rule1 { ...\\n\")), mdx(\"p\", null, \"With his name you can reference the rule from policies, and the compiler will use this name when generating the XACML rule ID.\"), mdx(\"p\", null, \"Rules may also contain obligations and advice. See the sections on obligations and advice for more details.\"), mdx(\"h2\", {\n    \"id\": \"policies\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#policies\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Policies\"), mdx(\"p\", null, \"Policies are used to collect multiple rules. A policy is declared using the keyword \\\"policy\\\". Here is an example of a policy with two rules:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"policy {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target clause Attributes.resourceType == \\\"document\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0condition Attributes.userClearance >= Attributes.resourceClassification\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply denyOverrides\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0permit\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0deny\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0condition Attributes.documentStatus == \\\"draft\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0&& not(Attributes.documentAuthor == Attributes.subjectId)\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n}\\n\")), mdx(\"p\", null, \"A policy may contain a target and/or a condition. These are used to determine whether the policy applies to the request. If there is no target or a condition, then the policy will apply to every request. The example policy contains both a target and a condition.\"), mdx(\"p\", null, \"There are two rules in this policy. A policy may contain any number of rules, or it may be empty. An empty policy can be useful as a placeholder during policy development. It is also possible to reference a rule by its name. For example, if you defined a rule named \\\"rule1\\\", you could simply write \\\"rule1\\\" within the policy and the compiler would inline a copy of the rule in that position.\"), mdx(\"p\", null, \"Since a policy may contain multiple rules, which may return different decisions, a combining algorithm is used to decide what the decision of the policy as a whole will be if there is a conflict among the rules. The combining algorithm is declared with the \\\"apply\\\" keyword (in the example it is the denyOverrides algorithm), so if both rules apply the decision from the policy as a whole will be deny.\"), mdx(\"p\", null, \"The policy in the example has not been given a name, so the compiler will generate a name and an XACML identifier automatically. If you wish to define a name, it is done after they keyword \\\"policy\\\":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"policy policy1 { ...\\n\")), mdx(\"p\", null, \"This name will be used to generate the XACML policy ID and can be used to reference the policy from policy sets. It is also possible to specify directly the full XACML policy ID using an equals sign after the name:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"policy policy1 = \\\"http://example.com/policies/policy1\\\" { ...\\n\")), mdx(\"p\", null, \"Policies may also contain obligations and advice. See the sections on obligations and advice for more details.\"), mdx(\"h3\", {\n    \"id\": \"policy-sets\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#policy-sets\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Policy sets\"), mdx(\"p\", null, \"Policy sets are collections of policies or other policy sets. A policy set is declared with the keyword \\\"policyset\\\". The following is an example of a policy set.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"policyset topLevel {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply permitOverrides\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0medicalPolicy\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0policy printerPolicy\\xA0{\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target clause Attributes.resourceType == \\\"printer\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply permitOverrides\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0permit\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0clause Attributes.role == \\\"doctor\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0or Attributes.role == \\\"nurse\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0or Attributes.role == \\\"receptionist\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0clause Attributes.userTraining = \\\"printer-use\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n}\\n\")), mdx(\"p\", null, \"A policy set may contain a target and/or a condition. The example above has a target but no condition. The target and condition determine whether the policy set applies to a request. If there is no target or condition, then the policy set applies to all requests.\"), mdx(\"p\", null, \"A policy set can contain any number of other policies or policy sets or references to such, or can be empty. An empty policy set can be useful as a placeholder during policy development. In the example above, there is a reference to a policy called \\\"medicalPolicy\\\". Such\\xA0 references are compiled to an XACML policy reference. The example also has an in-lined policy called \\\"printerPolicy\\\".\"), mdx(\"p\", null, \"Since there may be multiple contained policies and policy sets that may return conflicting decisions, a policy set has a combining algorithm that decides which decision is from the policy set as a whole. The combining algorithm is declared with the \\\"apply\\\" keyword. (In the example it is \\\"permitOverrides\\\".)\"), mdx(\"p\", null, \"The example gives a name \\\"topLevel\\\" to the policy set. Naming the policy set is optional. If a name is not specified, then the compiler will automatically generate a unique name for the policy. It is also possible to define the full XACML policy identifier explicitly by using an equals sign:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"policyset topLevel = \\\"http://example./com/policies/toplevel\\\" {\\n\")), mdx(\"p\", null, \"A policy set may also contain obligations and advice. See the sections on obligations and advice for more details.\"), mdx(\"h2\", {\n    \"id\": \"policy-hierarchies\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#policy-hierarchies\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Policy hierarchies\"), mdx(\"p\", null, \"By nesting rules, policies and policy sets, hierarchies of rules are formed. This is the manner by which complex use cases can be broken into smaller pieces and modeled into full-access control policies.\"), mdx(\"p\", null, \"Here is an example of a somewhat more complex structure:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"policyset p = \\\"urn:axiomatics:policies:example:p\\\" {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target ...\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply firstApplicable\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0authzManagement\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0authzExternal\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0policy alwaysDeny {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target ...\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply denyOverrides\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule1\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule rule2 {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target ...\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0permit\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#rules-policies-and-policy-sets","title":"Rules, Policies, and Policy sets","items":[{"url":"#rules","title":"Rules"},{"url":"#policies","title":"Policies","items":[{"url":"#policy-sets","title":"Policy sets"}]},{"url":"#policy-hierarchies","title":"Policy hierarchies"}]}]}}},"pageContext":{"id":"b90b80de-92d5-509b-bd5d-49f9bb6eef8e"}},"staticQueryHashes":["1022386572","1122327541","2140385554","3442269102","3587637372","4275725850"]}