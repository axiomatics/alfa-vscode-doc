{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/policy-authoring/obligations-and-advice/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Obligations and Advice","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Obligations and Advice\",\n  \"section\": \"Policy Authoring\",\n  \"order\": 8\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"obligations-and-advice\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#obligations-and-advice\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Obligations and Advice\"), mdx(\"p\", null, \"Obligations and advice appears as expressions in rules, policies or policy sets. Here is a rule with some obligations and advice.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"rule {\\n\\xA0\\xA0\\xA0\\xA0deny\\n\\xA0\\xA0\\xA0\\xA0condition not(booleanOneAndOnly(Attributes.careRelationExists))\\n\\xA0\\xA0\\xA0\\xA0on permit {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0obligation ObligationAdvice.notifyPatient {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Attributes.message = \\\"Your record was accessed\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Attributes.notificationRecipient = Attributes.patientId\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0obligation ObligationAdvice.logAccess\\n\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0on deny {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0advice ObligationAdvice.reasonForDeny {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Attributes.message = \\\"There is no care relation\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0}\\n}\\n\")), mdx(\"p\", null, \"Advice and obligations apply either to Deny or Permit decisions. This is indicated by \\\"on deny\\\" and \\\"on permit\\\" respectively. An obligation is defined with the \\\"obligation\\\" keyword and an advice is defined with the \\\"advice\\\" keyword. The keyword is followed with the name of the obligation or advice. The name has to have been declared somewhere. See the section on obligation and advice declarations for details.\"), mdx(\"p\", null, \"An obligation or advice may optionally contain attribute assignments. In the example above, the logAccess obligation does not contain an attribute assignment, while the other examples do. An attribute assignment consists of an attribute that is assigned a value from an expression. The attribute assignment can in this manner be used to provide parameters to the obligation. In the above example, the reasonForDeny advice contains a message explaining the reason for the denied access. If access had been permitted, a notification would be sent to the patient, and the obligation would include the ID of the patient to receive the notification and the message contained in the notification.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#obligations-and-advice","title":"Obligations and Advice"}]}}},"pageContext":{"id":"b32d635e-40b2-5825-8352-f24eaaec556b"}},"staticQueryHashes":["1122327541","1531940020","1792546820","2140385554","4275725850"]}