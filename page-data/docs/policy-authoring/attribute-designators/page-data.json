{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/policy-authoring/attribute-designators/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Attribute designators","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Attribute designators\",\n  \"section\": \"Policy Authoring\",\n  \"order\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"attribute-designators\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#attribute-designators\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Attribute designators\"), mdx(\"p\", null, \"AttributeDesignators in policies refer to the attribute declarations for translation to the full XACML syntax. They are referred to using the short name given for the attribute. The MustBePresent and Issuer attribute can be defined with the AttributeDesignator.\"), mdx(\"p\", null, \"Some valid AttributeDesignators are:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"role[mustbepresent]\\nrole[mustbepresent issuer=\\\"Axiomatics\\\"]\\nrole[issuer=\\\"Axiomatics\\\"]\\nrole\\n\")), mdx(\"p\", null, \"The attribute designators can then be used in expressions using operators and functions. For instance the following target uses the \\\"Attributes.resourceType\\\" attribute designator to match the value \\\"document\\\".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"target clause Attributes.resourceType == \\\"document\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"atomic-attributes-and-bags\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#atomic-attributes-and-bags\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Atomic attributes and bags\"), mdx(\"p\", null, \"All attribute designators return bag values. Some functions require atomic values. To convert the attribute designator to an atomic value, use the appropriate one-and-only function. For instance, the following example concerts the subject's age into an atomic value so it can be used in arithmetic operators.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"integerOneAndOnly(Attributes.age) + integerOneAndOnly([Attributes.trainingPeriod]) < 50\\xA0\\n\")), mdx(\"p\", null, \"This assumes that the attribute's age and training period contain exactly one value. If there are no values or multiple values, then the one-and-only function will return an Indeterminate result.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#attribute-designators","title":"Attribute designators","items":[{"url":"#atomic-attributes-and-bags","title":"Atomic attributes and bags"}]}]}}},"pageContext":{"id":"261ddca8-625d-531e-852c-5d6cf8548f27"}},"staticQueryHashes":["1122327541","1401783372","2140385554","3587637372","4275725850","918285632"]}