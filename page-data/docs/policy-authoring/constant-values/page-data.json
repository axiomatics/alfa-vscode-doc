{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/policy-authoring/constant-values/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Constant values","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Constant values\",\n  \"section\": \"Policy Authoring\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"constant-values\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#constant-values\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Constant values\"), mdx(\"p\", null, \"Constant values can appear in the policy expressions. The parser recognizes strings, integers, doubles and Booleans directly. Strings are quoted with single or double quotes. Integers consist of a number and optionally a minus sign. Double consists of a number with a decimal dot and optionally a minus sign. Booleans consist of the value true and false, without quotes.\"), mdx(\"p\", null, \"Other datatypes are represented using a string followed by a colon and the name of the datatype, as defined in the data type declaration. Examples of valid parameters are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"integer: 18, 20, -34\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"double: 30.5, -95.899\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Boolean: true, false\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"string: \\\"hello\\\", 'A sunny day'\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ipAddress: \\\"127.0.0.1\\\":ipAddress, '10.0.0.1':ipAddress\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#constant-values","title":"Constant values"}]}}},"pageContext":{"id":"2a3f75de-e2fc-520d-9121-e0a47f178eba"}},"staticQueryHashes":["1122327541","1531940020","1792546820","2140385554","4275725850"]}