{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/alfa-vs-code/testing/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Testing","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Testing\",\n  \"section\": \"Alfa VS Code\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"testing-the-visual-studio-code-extension-for-alfa\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#testing-the-visual-studio-code-extension-for-alfa\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Testing the Visual Studio Code extension for ALFA\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" The following instructions assume a basic knowledge of the workflow in Visual Studio Code. Refer to the Visual Studio Code documentation for more information about the editor.\")), mdx(\"p\", null, \"When the Visual Studio Code extension for ALFA has been installed, you can try it out.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Open a project folder in VS Code.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a new file and click to select ALFA as the language from the \\\"Select a language\\\" drop-down menu (or press Ctrl+K M).\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"This tells VS Code to interpret the file as ALFA and evaluate the content using the ALFA language service.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Save the file with the file extension \\\".alfa\\\", for instance \\\"test.alfa\\\".\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The file must be saved with the .alfa file extension for the compilation functionality to work.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"When a new file is saved with the .alfa file extension, two supporting files are copied to the working folder: \\\"system.alfa\\\" and \\\"standard-attributes.alfa\\\".\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The \\\"system.alfa\\\" file contains definitions for the standard XACML functions. The \\\"standard-attributes.alfa\\\" file contains attribute ID definitions for the standard attributes from the XACML specification.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Enter the following text into the file test.alfa:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"namespace test {\\n   policy testpolicy {\\n      target clause Attributes.subjectId == \\\"alice\\\"\\n      apply permitOverrides\\n      rule {\\n         permit\\n      }\\n   }\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Save the test.alfa file.\")), mdx(\"p\", null, \"The compiler should now have produced an XML file with an XACML policy in a subfolder called \\\"src-gen\\\". The generated file name follows the naming pattern \\\"namespace.policy.xml\\\".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#testing-the-visual-studio-code-extension-for-alfa","title":"Testing the Visual Studio Code extension for ALFA"}]}}},"pageContext":{"id":"60fcb19e-e36a-5338-b2c9-a980b396fd27"}},"staticQueryHashes":["1022386572","1122327541","2140385554","3442269102","3587637372","4275725850"]}