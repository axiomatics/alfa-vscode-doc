{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/alfa-introduction/a-simple-example/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"A simple example","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"A simple example\",\n  \"section\": \"AlfaÂ Introduction\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"a-simple-example\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#a-simple-example\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"A simple example\"), mdx(\"p\", null, \"The following is an example of an XACML policy written in ALFA:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"namespace documents {\\n\\xA0\\xA0\\xA0\\xA0policy topLevel {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target clause Attributes.resourceType == \\\"document\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply denyOverrides\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0permit\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0condition Attributes.userClearance >=\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Attributes.resourceClassification\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0deny\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0condition Attributes.documentStatus == \\\"draft\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0&& not(Attributes.documentAuthor == Attributes.subjectId)\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0}\\n}\\n\")), mdx(\"p\", null, \"The first line declares a namespace in which the policies exist. All ALFA documents must start with a namespace declaration. Namespaces are used to collect related policies under a shared name structure. By default the identifiers of the policies will inherit the namespace they belong to.\"), mdx(\"p\", null, \"The second line defines a policy with the name topLevel. Naming a policy is optional, but for top level policies it is useful to define it since the namespace and the policy name are used to confirm the name of the XACML XML file that is produced by the compiler. In this case, the filename will be documents.topLevel.xml.\"), mdx(\"p\", null, \"This policy has a target that is defined on the third line. A target is a conditional expression that determines when a policy or a rule applies. Targets are optional in both policies and rules. In the above example, the target matches if the request contains a resource type attribute with the value \\\"document\\\".\"), mdx(\"p\", null, \"Note that attributes in XACML are multi-valued, so-called \\\"bags\\\", so any attribute in the request may contain zero or more values, and a value may even be repeated multiple times. The expression in the target matches if there is at least one matching value.\"), mdx(\"p\", null, \"A target can contain a list of clauses that can be combined with \\\"and\\\" or \\\"or\\\". In this case there is only one expression so that structure is not visible. There is, however, another example below with a more complex target.\"), mdx(\"p\", null, \"Within the policy there are two rules. One of the rules may permit access and the other one may deny access, depending on how the rules match the request. The policy applies a deny override algorithm to decide which gets priority in the event that both rules match. In such a case, the deny decision will receive priority.\"), mdx(\"p\", null, \"The two rules do not contain any target; rather, they use a condition, which is another way to define how a rule or a policy matches. A condition is not limited to a special structure, unlike a target, which is why it is used in this instance.\"), mdx(\"p\", null, \"The first rule will permit access to the document if the user's clearance is at least as high as the document's classification. The second rule will override this if the document's status is draft and the user attempting access is not the author of the document.\"), mdx(\"p\", null, \"Note that the operators \\\"==\\\", \\\"\\\\<\\\", etc., can be applied to bags in the condition. If the values are not bags, then the operator is applied between the two atomic values. However, if either operand is a bag, the operator is applied through the XACML any-of-any function, which means that as in the target the operator returns true if at least one combination of values causes the operator to evaluate to true. For example, if there are three authors of the document \\\"Alice\\\", \\\"Bob\\\" and \\\"Carol\\\", and the subject is \\\"Alice\\\", then the expression \\\"Attributes.documentAuthor == Attributes.subjectId\\\" would be true.\"), mdx(\"p\", null, \"Some operators (e.g., \\\"+\\\") cannot operate on bags, so these will cause a syntax error that will be highlighted in the editor. For more details on this feature, see the operator definitions in this guide.\"), mdx(\"p\", null, \"The attributes themselves are defined in a separate file. In this case, we have the following definitions:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"namespace\\xA0Attributes\\xA0{\\n\\xA0\\xA0\\xA0\\xA0import System.*\\n\\n\\xA0\\xA0\\xA0\\xA0attribute resourceType {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0id = \\\"http://example.com/xacml/attr/resource/type\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0type = string\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0category =resourceCat\\n\\xA0\\xA0\\xA0\\xA0}\\n\\n\\xA0\\xA0\\xA0\\xA0attribute resourceClassification {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0id = \\\"http://example.com/xacml/attr/resource/classification\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0type = integer\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0category = resourceCat\\n\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\n\\xA0\\xA0\\xA0\\xA0attribute userClearance {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0id = \\\"http://example.com/xacml/attr/subject/clearance\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0type = integer\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0category = subjectCat\\n\\xA0\\xA0\\xA0\\xA0}\\n\\n\\xA0\\xA0\\xA0\\xA0attribute documentStatus {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0id = \\\"http://example.com/xacml/attr/resource/documentStatus\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0type = string\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0category = resourceCat\\n\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\n\\xA0\\xA0\\xA0\\xA0attribute documentAuthor {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0id = \\\"http://example.com/xacml/attr/resource/documentAuthor\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0type = string\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0category = resourceCat\\n\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\n\\xA0\\xA0\\xA0\\xA0attribute subjectId {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0id = \\\"urn:oasis:names:tc:xacml:1.0:subject:subject-id\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0type = string\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0category = subjectCat\\n\\xA0\\xA0\\xA0\\xA0}\\n}\\n\")), mdx(\"p\", null, \"These define how the attributes are translated into XACML attributes. For each attribute there is a short name, which is used when writing policies in ALFA, the full XACML attribute identifier, the data type of the attribute and the category it belongs to (subject, resource, action, environment, etc.).\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#a-simple-example","title":"A simple example"}]}}},"pageContext":{"id":"0a0bfb1f-7d73-58ae-93ed-8e7549416c5a"}},"staticQueryHashes":["1122327541","1401783372","2140385554","3587637372","4275725850","918285632"]}