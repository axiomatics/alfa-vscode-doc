{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/alfa-introduction/a-second-example/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"A second example","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"A second example\",\n  \"section\": \"AlfaÂ Introduction\",\n  \"order\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"a-second-example\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#a-second-example\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"A second example\"), mdx(\"p\", null, \"The following is an example of a policy that uses some additional features of ALFA.\"), mdx(\"p\", null, \"Let us define an advice that will be used in the example.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"namespace ObligationAdvice {\\n\\xA0\\xA0\\xA0\\xA0advice reasonForDeny = \\\"http://example.com/advice/reasonForDeny\\\"\\n}\\n\")), mdx(\"p\", null, \"Let us also define some additional attributes concerning medical records and printers so we can write a set of policies for a hospital.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-alfa\"\n  }, \"namespace hospital {\\n\\xA0\\xA0\\xA0\\xA0policyset topLevel {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply permitOverrides\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0medicalPolicy\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0printerPolicy\\n\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\n\\xA0\\xA0\\xA0\\xA0policy medicalPolicy {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target clause Attributes.resourceType == \\\"medical-record\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply denyOverrides\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0permit\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target clause Attributes.role == \\\"doctor\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0deny\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0condition not(booleanOneAndOnly(Attributes.careRelationExists))\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0on deny {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0advice ObligationAdvice.reasonForDeny {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Attributes.message = \\\"There is no care relation\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0 \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0deny\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0condition booleanOneAndOnly(Attributes.recordIsBlocked)\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0on deny {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0advice ObligationAdvice.reasonForDeny {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Attributes.message = \\\"The record is blocked\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0}\\n\\n\\xA0\\xA0\\xA0\\xA0policy printerPolicy {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target clause Attributes.resourceType == \\\"printer\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0apply permitOverrides\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0rule {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0permit\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0target\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0clause Attributes.role == \\\"doctor\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0or Attributes.role == \\\"nurse\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0or Attributes.role == \\\"receptionist\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0clause Attributes.userTraining == \\\"printer-use\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0}\\n\\xA0\\xA0\\xA0\\xA0}\\n}\\n\")), mdx(\"p\", null, \"This second example introduces a few more features of ALFA.\"), mdx(\"p\", null, \"At the top you can see that we have defined a policyset. A policy set contains either policies or another policy set, allowing for arbitrarily deep nesting. The contained policies or policy sets can either be in-lined within the policy set or, as in the example, referenced by their name. In this example, the two referenced policies become their own separate XACML XML files when the ALFA source is compiled to XACML.\"), mdx(\"p\", null, \"Looking at these policies, we see they both concern hospital procedures. One policy refers to medical records access. Access to medical records is permitted for doctors but is blocked if the doctor does not have a caregiving relationship to the patient or if access to the record has been suspended for some reason.\"), mdx(\"p\", null, \"The conditions show an example of how to convert a bag into an atomic value. As was previously mentioned, all attributes in XACML are bags that may contain any number of values. However, in many cases exactly one value per attribute is expected in the request and the policy wants to operate on this single value. The booleanOneAndOnly function converts a bag of Boolean values into an atomic value, and checks that there is exactly one value in the bag. If there is not exactly one value, then the function returns an XACML Indeterminate result.\"), mdx(\"p\", null, \"Another new feature in this example is the use of an advice. An advice is an extra item in the result which can be used to convey extra information to the PEP. The PEP may ignore the advice, however. There is a similar feature called an obligation which may not be ignored by the PEP. There is no obligation in this example though.\"), mdx(\"p\", null, \"In this case we use an advice to return a reason for a denial of access. That may be important to tell the doctor so he knows how he could gain access if needed. For instance, he might have forgotten to register the patient as being treated by him.\"), mdx(\"p\", null, \"The second policy concerns access to a printer. This policy illustrates a more complex target. In this case, there are three different roles that have been granted access to the printer. The two different clauses are ANDed together, with lower precedence than the OR operator, so any of the three roles will work. In addition the user must have training in how to use the printer.\"), mdx(\"p\", null, \"This second example concludes the introduction. The most significant features of the language have been shown in these examples. The rest of this manual consists of reference information on ALFA's features.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#a-second-example","title":"A second example"}]}}},"pageContext":{"id":"a2204dd7-dd4b-5ab3-bcca-2cb0e69392c8"}},"staticQueryHashes":["1122327541","1531940020","1792546820","2140385554","4275725850"]}