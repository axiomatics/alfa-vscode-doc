{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"","editLink":""},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"visual-studio-code-extension-for-alfa\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#visual-studio-code-extension-for-alfa\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Visual Studio Code extension for ALFA\"), mdx(\"p\", null, \"The Visual Studio Code extension for ALFA provides language support for the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Abbreviated Language for Authorization (ALFA)\"), \", which is a domain-specific language for a high-level description of XACML policies. Among its features, it presents domain specific information such as attribute identifiers in compact form and it can be compiled into XACML 3.0.\"), mdx(\"p\", null, \"ALFA simplifies the authoring process for authorization policies, helping developers tackle authorization quicker than ever before. The language uses a syntax that closely resembles common programming languages such as Java and C#, making it much easier to read and work with than the verbose XML of the standard XACML policy model. By integrating the extension for ALFA into the VS Code environment, policy authoring becomes easier and faster as the XML syntax and encoding are abstracted away.\"), mdx(\"p\", null, \"The Visual Studio Code extension for ALFA includes support for a number of development features, such as code completion, syntax highlighting, refactoring, and go-to-definition navigation. The included compiler automatically and incrementally generates the XACML equivalent, which can then be exported to compliant policy decision points.\"), mdx(\"p\", null, \"ALFA was originally developed by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.axiomatics.com/\"\n  }, \"Axiomatics AB\"), \" as the \\\"Axiomatics Language for Authorization\\\" before the language definition was donated to OASIS to become an open standard under the name \\\"Abbreviated Language for Authorization\\\". The Visual Studio Code extension for ALFA contains Axiomatics' implementation of the open standard \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.oasis-open.org/committees/download.php/55228/alfa-for-xacml-v1.0-wd01.doc\"\n  }, \"Abbreviated Language for Authorization v. 1.0\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#visual-studio-code-extension-for-alfa","title":"Visual Studio Code extension for ALFA"}]}}},"pageContext":{"id":"70917381-4234-555f-bfb3-2a82a810c888"}},"staticQueryHashes":["1122327541","1401783372","2140385554","3587637372","4275725850","918285632"]}